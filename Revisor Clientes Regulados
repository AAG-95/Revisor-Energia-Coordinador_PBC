# -*- coding: utf-8 -*-
"""
Created on Thu Jun 22 12:03:07 2023

@author: alonso.flores
"""


from openpyxl import load_workbook #librería que permite trabajar excel con python
import pandas as pd  #librería que permite la manipulación y tratamiento de datos
import csv #librería que permite leer y guardar archivos csv 
import datetime as dt
import numpy as np


def obtencion_Tablas(data_total, primera_fila, primera_columna, ultima_columna):

#selected_columns = df.columns[6:15]
 selected_columns = data_total.columns[primera_columna:ultima_columna]
# Crear una lista para almacenar las filas
 rows_to_add = []

# Iterar a partir de la línea 4
 for i in range(primera_fila, len(data_total)):
    # Obtener el valor de la primera columna para la fila actual
        first_column_value = data_total.iloc[i, primera_columna]

        # Verificar si el valor de la primera columna es nulo
        if pd.isnull(first_column_value):
            break
    # Obtener los valores de las columnas seleccionadas para la fila actual
        values = data_total.iloc[i, primera_columna:ultima_columna].values
     # Agregar la fila a la lista
        rows_to_add.append(values)
#
 new_rows_df = pd.DataFrame(rows_to_add, columns=selected_columns)

# Asignar la primera fila como encabezados de columna
 new_rows_df.columns = new_rows_df.iloc[0]

# Reindexar el DataFrame para omitir la primera fila
 new_rows_df = new_rows_df.reindex(new_rows_df.index.drop(0)).reset_index(drop=True)
 return new_rows_df 


def concatena_tablas(Meses_analizados, Ruta_1,Ruta_2, hoja):


 Lista=[]
 Largo=0
 Contador=0
 for i in Meses_analizados:
  print(i)
  
  # Abrir el archivo de Excel
  archivo_excel=Ruta_1+i+Ruta_2+'.xlsx' #Actualizar dirección de archivo xlsx a mes de recaudación actual
  
  # Obtener el nombre de la hoja
  nombre_hoja = hoja
 
  #Obtención Archivo Balance de potencia

  # Cargar el archivo Excel
  df = pd.read_excel(archivo_excel, sheet_name= nombre_hoja)

  df_tabla=obtencion_Tablas(df,17,3,13)
  Lista.append(df_tabla)
  Largo=Largo+len(df_tabla)
  Contador=Contador+1
 df['Mes Información'] = i
 BDD=pd.concat(Lista) 
 BDD=BDD.reset_index(drop=True) 
 return BDD


# Bdd original
Meses=['Sep2021','Oct2021','Nov2021','Dic2021','Ene2022','Feb2022','Mar2022','Abr2022','May2022','Jun2022','Jul2022','Ago2022','Sep2022','Oct2022','Nov2022','Dic2022','Ene2023','Feb2023','Mar2023']
Ruta_p1=r'Z:\Cargo por Transmisión\02 Repartición\2023\Corrección Declaraciones RCUT EnelDx\Archivos IFC\VE01_FIFC_ENEL_DISTRIBUCION_RCUT' #Actualizar dirección de archivo xlsx a mes de recaudación actual
Ruta_p2=''
Hoja= "Formulario-Clientes R"
#Tabla Zonal

BDD_original= concatena_tablas(Meses,Ruta_p1,Ruta_p2,Hoja)
# Convertir la columna 'Columna' a tipo object y reemplazar punto con coma
BDD_original['Recaudación [$]'] = BDD_original['Recaudación [$]'].astype('str')
BDD_original['Recaudación [$]'] = BDD_original['Recaudación [$]'].str.replace('.', ',', regex=True)
BDD_original['Energía facturada [kWh]'] = BDD_original['Energía facturada [kWh]'].astype('str')
BDD_original['Energía facturada [kWh]'] = BDD_original['Energía facturada [kWh]'].str.replace('.', ',', regex=True)
BDD_original['Cargo [$/kWh]'] = BDD_original['Cargo [$/kWh]'].astype('str')
BDD_original['Cargo [$/kWh]'] = BDD_original['Cargo [$/kWh]'].str.replace('.', ',', regex=True)

Ruta_guardado=r'Z:\Cargo por Transmisión\02 Repartición\2023\Corrección Declaraciones RCUT EnelDx\BDD_envio_original(Actualizado a Marzo 2023).csv'

BDD_original.to_csv(Ruta_guardado, index=False, encoding='latin1',sep=";")

# Bdd nueva
Meses=['Sep2021','Oct2021','Nov2021','Dic2021','Ene2022','Feb2022','Mar2022','Abr2022','May2022','Jun2022','Jul2022','Ago2022','Sep2022','Oct2022','Nov2022','Dic2022','Ene2023','Feb2023','Mar2023']
Ruta_p1=r'Z:\Cargo por Transmisión\02 Repartición\2023\Corrección Declaraciones RCUT EnelDx\Formatos CUT nuevos\VC01_FIFC_ENEL_DISTRIBUCION_RCUT' #Actualizar dirección de archivo xlsx a mes de recaudación actual
Ruta_p2='_vnew'
Hoja= "Formulario-Clientes R"

BDD_nueva= concatena_tablas(Meses,Ruta_p1,Ruta_p2,Hoja)
# Convertir la columna 'Columna' a tipo object y reemplazar punto con coma
BDD_nueva['Recaudación [$]'] = BDD_nueva['Recaudación [$]'].astype('str')
BDD_nueva['Recaudación [$]'] = BDD_nueva['Recaudación [$]'].str.replace('.', ',')
BDD_nueva['Energía facturada [kWh]'] = BDD_nueva['Energía facturada [kWh]'].astype('str')
BDD_nueva['Energía facturada [kWh]'] = BDD_nueva['Energía facturada [kWh]'].str.replace('.', ',')
BDD_nueva['Cargo [$/kWh]'] = BDD_nueva['Cargo [$/kWh]'].astype('str')
BDD_nueva['Cargo [$/kWh]'] = BDD_nueva['Cargo [$/kWh]'].str.replace('.', ',')
 
Ruta_guardado=r'Z:\Cargo por Transmisión\02 Repartición\2023\Corrección Declaraciones RCUT EnelDx\BDD_envio_nuevo(Actualizado a Marzo 2023).csv'

BDD_nueva.to_csv(Ruta_guardado, index=False, encoding='latin1', sep=";")